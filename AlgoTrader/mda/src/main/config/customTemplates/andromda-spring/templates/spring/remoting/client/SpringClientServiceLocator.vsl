## AlgoTrader: 15075
## 131: do not output services with superClassServices
## output client services
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: remoting/client/SpringClientServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${clientServiceLocatorName}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $clientServiceLocatorName implements CommonServiceLocator
{

    private ${clientServiceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ${clientServiceLocatorName}.
     */
    private static final ${clientServiceLocatorName} instance = new ${clientServiceLocatorName}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final $clientServiceLocatorName instance()
    {
        return instance;
    }

    /**
     * The bean factory reference instance.
     */
    private org.springframework.beans.factory.access.BeanFactoryReference beanFactoryReference;
    
    /**
     * The bean factory reference location.
     */
    private String beanFactoryReferenceLocation;
    
    /**
     * The bean factory reference id.
     */
    private String beanRefFactoryReferenceId;

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocation the location of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocation, final String beanRefFactoryReferenceId)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocation;
        this.beanRefFactoryReferenceId = beanRefFactoryReferenceId;
        this.beanFactoryReference = null;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocation the location of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocation)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocation;
        this.beanFactoryReference = null;
    }
    
    /**
     * The default bean reference factory location.
     */
    private final String DEFAULT_BEAN_REFERENCE_LOCATION = "beanRefFactoryClient.xml";
    
    /**
     * The default bean reference factory ID.
     */
    private final String DEFAULT_BEAN_REFERENCE_ID = "$beanRefFactoryId";

    /**
     * Gets the Spring ApplicationContext.
     */
    protected synchronized org.springframework.context.ApplicationContext getContext()
    {
        if (this.beanFactoryReference == null)
        {
            if (this.beanFactoryReferenceLocation == null)
            {
                this.beanFactoryReferenceLocation = DEFAULT_BEAN_REFERENCE_LOCATION;
            }
            if (this.beanRefFactoryReferenceId == null)
            {
                this.beanRefFactoryReferenceId = DEFAULT_BEAN_REFERENCE_ID;
            }
            org.springframework.beans.factory.access.BeanFactoryLocator beanFactoryLocator =
                org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance(
                    this.beanFactoryReferenceLocation);
            this.beanFactoryReference = beanFactoryLocator.useBeanFactory(this.beanRefFactoryReferenceId);
        }
        return (org.springframework.context.ApplicationContext)this.beanFactoryReference.getFactory();
    }

    /**
     * Shuts down the ServiceLocator and releases any used resources.
     */
    public synchronized void shutdown()
    {
        if (this.beanFactoryReference != null)
        {
            this.beanFactoryReference.release();
            this.beanFactoryReference = null;
        }
    }

#foreach ($service in $services)
#if($service.remotable || !$stringUtils.isBlank($service.findTaggedValue('@algoTrader.service.client')))
#if($stringUtils.isBlank($service.superClass))
	
    /**
     * Gets an instance of {@link $service.fullyQualifiedName}.
     */
    public final $service.fullyQualifiedName get${service.name}()
    {
        return ($service.fullyQualifiedName)
            getContext().getBean("$service.beanName");
    }

#end
#end
#end
#foreach ($manageable in $manageables)
#if ($manageable.remotable)
    /**
     * Gets an instance of {@link $manageable.fullyQualifiedManageableServiceName}.
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}()
    {
        return ($manageable.fullyQualifiedManageableServiceName)
            getContext().getBean("$manageable.manageableServiceName");
    }

#end
#end
#if ($acegiServiceSecurity && $richClient)
    /**
     * Get the authentication manager used to validate user credentials.
     */
    public final org.acegisecurity.providers.rcp.RemoteAuthenticationManager getRemoteAuthenticationService()
    {
        return (org.acegisecurity.providers.rcp.RemoteAuthenticationManager)
            getContext().getBean("${serviceRemoteContext}RemoteAuthenticationManagerService");
    }

#end
    /**
     * Gets an instance of the given service.
     */
    public final Object getService(String serviceName)
    {
        return getContext().getBean(serviceName);
    }
}
