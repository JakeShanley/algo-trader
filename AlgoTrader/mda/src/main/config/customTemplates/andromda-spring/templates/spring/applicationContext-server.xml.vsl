## AlgoTrader: 14257
## line 13: do not output services with superClassServices
<?xml version="1.0" encoding="$xmlEncoding"?>
<!-- Generated by: applicationContext-server.xml.vsl in andromda-spring-cartridge. -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.0.xsd">

    <!-- ==================== Start of REMOTE SERVICE DEFINITIONS ===================== -->

#foreach($service in $services)
#if($stringUtils.isBlank($service.superClass))
    <!-- $service.name Remote Service exporter  -->
#if($service.remotingTypeHttpInvoker)
    <bean name="/$service.name" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
#elseif($service.remotingTypeHessian)
    <bean name="/$service.name" class="org.springframework.remoting.caucho.HessianServiceExporter">
#elseif($service.remotingTypeBurlap)
    <bean name="/$service.name" class="org.springframework.remoting.caucho.BurlapServiceExporter">
#elseif ($service.remotingTypeRmi)
    <bean name="$service.name" class="org.springframework.remoting.rmi.RmiServiceExporter">
        <property name="serviceName" value="$service.name"/>
        <property name="registryPort" value="$service.remotePort"/>
#elseif ($service.remotingTypeLingo)
    <bean id="${service.name}Server" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="concurrentConsumers" value="20"/>
        <property name="destination">
            <bean class="org.activemq.message.ActiveMQQueue">
                <constructor-arg index="0">
                    <value>$service.fullyQualifiedName</value>
                </constructor-arg>
            </bean>
        </property>
        <property name="messageListener" ref="${service.name}Listener"/>
        <property name="connectionFactory" ref="jmsFactory"/>
    </bean>
    <bean id="${service.name}Listener" class="org.logicblaze.lingo.jms.JmsServiceExporterMessageListener">
        <property name="connectionFactory" ref="jmsFactory"/>
#end
        <property name="service" ref="$service.getBeanName(false)"/>
        <property name="serviceInterface" value="$service.fullyQualifiedName"/>
    </bean>

#end
#end
#foreach ($manageable in $manageables)
    <!-- $manageable.manageableServiceName Remote Service exporter  -->
#if($manageable.remotingTypeHttpInvoker)
    <bean name="/remote$manageable.manageableServiceName" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
#elseif($manageable.remotingTypeHessian)
    <bean name="/remote$manageable.manageableServiceName" class="org.springframework.remoting.caucho.HessianServiceExporter">
#elseif($manageable.remotingTypeBurlap)
    <bean name="/remote$manageable.manageableServiceName" class="org.springframework.remoting.caucho.BurlapServiceExporter">
#elseif ($manageable.remotingTypeRmi)
    <bean name="remote$manageable.manageableServiceName" class="org.springframework.remoting.rmi.RmiServiceExporter">
        <property name="serviceName" value="$manageable.manageableServiceName"/>
        <property name="registryPort" value="$manageable.remotePort"/>
#end
        <property name="service" ref="$manageable.manageableServiceName"/>
        <property name="serviceInterface" value="$manageable.fullyQualifiedManageableServiceName"/>
    </bean>

#end
    <!-- ==================== End of REMOTE SERVICE DEFINITIONS ======================= -->

#if($lingoRemotableServicesPresent)
    <!-- JMS ConnectionFactory for Lingo remoting -->
    <bean id="jmsFactory" class="org.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:$serviceRemotePortJMS"/>
        <property name="useEmbeddedBroker" value="true" />
    </bean>

#end
#if ($richClient && $acegiServiceSecurity)
    <!-- Authentication service for remote rich clients -->
    <bean name="/RemoteAuthenticationManagerService" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
        <property name="service">
            <bean class="org.acegisecurity.providers.rcp.RemoteAuthenticationManagerImpl">
                <property name="authenticationManager" ref="${acegiAuthenticationManager}"/>
            </bean>
        </property>
        <property name="serviceInterface" value="org.acegisecurity.providers.rcp.RemoteAuthenticationManager"/>
    </bean>

#end
</beans>
