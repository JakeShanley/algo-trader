module movMain;

// --------------------- periodic trades every 10 seconds -------------------------
/*
@Name('CREATE_BUY_ORDER')
@Subscriber(className='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateMarketOrderSubscriber')
select
1000 as quantity
from pattern [every timer:interval(20 sec)];

@Name('CREATE_SELL_ORDER')
@Subscriber(className='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateMarketOrderSubscriber')
select
-1000 as quantity
from pattern [every timer:interval(20 sec)] output every 10 sec;
*/

// ------------------ market order and corresponding cancel ----------------------

/*
@Name('CREATE_MARKET_ORDER')
@Subscriber(className='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateMarketOrderSubscriber')
select
1000 as quantity
from pattern [timer:interval(2 sec)];

@Name('CANCEL_ORDER')
@Subscriber(className='com.algoTrader.service.OrderServiceImpl$CancleOrderSubscriber')
select
marketOrder as orderNumer
from pattern [every marketOrder=MarketOrder -> (timer:interval(1 sec) and not OrderStatus(status = Status.EXECUTED, parentOrder.number = marketOrder.number))];
*/

// ------------------ limit order and corresponding order modification ---------

/*
@Name('CREATE_LIMIT_ORDER')
@Subscriber(className='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateLimitOrderSubscriber')
select
1000 as quantity,
tick.bid
from pattern [tick=Tick]
where tick.security.symbol = 'GOOG';

@Name('MODIFY_LIMIT_ORDER')
@Subscriber(className='com.algoTrader.service.OrderServiceImpl$ModifyOrderSubscriber')
select 
OrderUtil.modifyOrderLimit(limitOrder, limitOrder.`limit` + 0.1) 
from pattern [every limitOrder=LimitOrder -> (timer:interval(2 sec) and not OrderStatus(status = Status.EXECUTED, parentOrder.number = limitOrder.number))];
*/

// ------------------ stepping limit order ---------

@Name('CREATE_STEPPING_LIMIT_ORDER')
@Subscriber(className='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateSteppingLimitOrderSubscriber')
select
1000 as quantity,
tick.bid as lmt,
tick.ask as maxLimit,
(tick.ask - tick.bid) / 10 as increment
from pattern [tick=Tick]
where tick.security.symbol = 'GOOG';

// -------------------- debug statements -----------------------------------------

@Subscriber(className='com.algoTrader.esper.subscriber.TestSubscriber')
select 'Order' as eventType, * from GenericOrder;

@Subscriber(className='com.algoTrader.esper.subscriber.TestSubscriber')
select 'OrderStatus' as eventType, * from OrderStatus;

@Subscriber(className='com.algoTrader.esper.subscriber.TestSubscriber')
select 'Fill' as eventType, * from Fill;

@Subscriber(className='com.algoTrader.esper.subscriber.TestSubscriber')
select 'Transaction' as eventType, * from Transaction;
